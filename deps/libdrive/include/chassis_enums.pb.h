// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chassis_enums.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chassis_5fenums_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chassis_5fenums_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chassis_5fenums_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chassis_5fenums_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chassis_5fenums_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace vts {
namespace protocol {
namespace chassis {

enum MsgType : int {
  VEHICLE_REGISTER = 0,
  VEHICLE_UNREGISTER = 1,
  VEHICLE_CONTROL = 2,
  VEHICLE_FEEDBACK = 3,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MsgType_IsValid(int value);
constexpr MsgType MsgType_MIN = VEHICLE_REGISTER;
constexpr MsgType MsgType_MAX = VEHICLE_FEEDBACK;
constexpr int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor();
template<typename T>
inline const std::string& MsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgType_descriptor(), enum_t_value);
}
inline bool MsgType_Parse(
    const std::string& name, MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
enum DrivingMode : int {
  OFF = 0,
  MANUAL = 1,
  AUTONOMOUS_DRIVING = 2,
  FAULT = 3,
  DrivingMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DrivingMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DrivingMode_IsValid(int value);
constexpr DrivingMode DrivingMode_MIN = OFF;
constexpr DrivingMode DrivingMode_MAX = FAULT;
constexpr int DrivingMode_ARRAYSIZE = DrivingMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DrivingMode_descriptor();
template<typename T>
inline const std::string& DrivingMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DrivingMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DrivingMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DrivingMode_descriptor(), enum_t_value);
}
inline bool DrivingMode_Parse(
    const std::string& name, DrivingMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DrivingMode>(
    DrivingMode_descriptor(), name, value);
}
enum VehicleError : int {
  OK = 0,
  VEHICLE_REGISTERED = 1,
  TESTCASE_NOT_READY = 2,
  NO_MAP_FILE_FOUND = 3,
  VehicleError_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VehicleError_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VehicleError_IsValid(int value);
constexpr VehicleError VehicleError_MIN = OK;
constexpr VehicleError VehicleError_MAX = NO_MAP_FILE_FOUND;
constexpr int VehicleError_ARRAYSIZE = VehicleError_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleError_descriptor();
template<typename T>
inline const std::string& VehicleError_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VehicleError>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VehicleError_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VehicleError_descriptor(), enum_t_value);
}
inline bool VehicleError_Parse(
    const std::string& name, VehicleError* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VehicleError>(
    VehicleError_descriptor(), name, value);
}
enum SteeringControlMode : int {
  TARGET_STEERING_ANGLE_MODE = 0,
  ACTUAL_STEERING_ANGLE_MODE = 1,
  SteeringControlMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SteeringControlMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SteeringControlMode_IsValid(int value);
constexpr SteeringControlMode SteeringControlMode_MIN = TARGET_STEERING_ANGLE_MODE;
constexpr SteeringControlMode SteeringControlMode_MAX = ACTUAL_STEERING_ANGLE_MODE;
constexpr int SteeringControlMode_ARRAYSIZE = SteeringControlMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SteeringControlMode_descriptor();
template<typename T>
inline const std::string& SteeringControlMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SteeringControlMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SteeringControlMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SteeringControlMode_descriptor(), enum_t_value);
}
inline bool SteeringControlMode_Parse(
    const std::string& name, SteeringControlMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SteeringControlMode>(
    SteeringControlMode_descriptor(), name, value);
}
enum GearControlMode : int {
  AUTOMATIC_GEAR_MODE = 0,
  MANUAL_GEAR_MODE = 1,
  GearControlMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GearControlMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GearControlMode_IsValid(int value);
constexpr GearControlMode GearControlMode_MIN = AUTOMATIC_GEAR_MODE;
constexpr GearControlMode GearControlMode_MAX = MANUAL_GEAR_MODE;
constexpr int GearControlMode_ARRAYSIZE = GearControlMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GearControlMode_descriptor();
template<typename T>
inline const std::string& GearControlMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GearControlMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GearControlMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GearControlMode_descriptor(), enum_t_value);
}
inline bool GearControlMode_Parse(
    const std::string& name, GearControlMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GearControlMode>(
    GearControlMode_descriptor(), name, value);
}
enum DrivingControlMode : int {
  TARGET_ACCELERATOR_PEDAL_MODE = 0,
  ACTUAL_ACCELERATOR_PEDAL_MODE = 1,
  DrivingControlMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DrivingControlMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DrivingControlMode_IsValid(int value);
constexpr DrivingControlMode DrivingControlMode_MIN = TARGET_ACCELERATOR_PEDAL_MODE;
constexpr DrivingControlMode DrivingControlMode_MAX = ACTUAL_ACCELERATOR_PEDAL_MODE;
constexpr int DrivingControlMode_ARRAYSIZE = DrivingControlMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DrivingControlMode_descriptor();
template<typename T>
inline const std::string& DrivingControlMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DrivingControlMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DrivingControlMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DrivingControlMode_descriptor(), enum_t_value);
}
inline bool DrivingControlMode_Parse(
    const std::string& name, DrivingControlMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DrivingControlMode>(
    DrivingControlMode_descriptor(), name, value);
}
enum BrakeControlMode : int {
  TARGET_BRAKE_PEDAL_MODE = 0,
  ACTUAL_BRAKE_PEDAL_MODE = 1,
  BrakeControlMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BrakeControlMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BrakeControlMode_IsValid(int value);
constexpr BrakeControlMode BrakeControlMode_MIN = TARGET_BRAKE_PEDAL_MODE;
constexpr BrakeControlMode BrakeControlMode_MAX = ACTUAL_BRAKE_PEDAL_MODE;
constexpr int BrakeControlMode_ARRAYSIZE = BrakeControlMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BrakeControlMode_descriptor();
template<typename T>
inline const std::string& BrakeControlMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BrakeControlMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BrakeControlMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BrakeControlMode_descriptor(), enum_t_value);
}
inline bool BrakeControlMode_Parse(
    const std::string& name, BrakeControlMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BrakeControlMode>(
    BrakeControlMode_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace chassis
}  // namespace protocol
}  // namespace vts

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::vts::protocol::chassis::MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vts::protocol::chassis::MsgType>() {
  return ::vts::protocol::chassis::MsgType_descriptor();
}
template <> struct is_proto_enum< ::vts::protocol::chassis::DrivingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vts::protocol::chassis::DrivingMode>() {
  return ::vts::protocol::chassis::DrivingMode_descriptor();
}
template <> struct is_proto_enum< ::vts::protocol::chassis::VehicleError> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vts::protocol::chassis::VehicleError>() {
  return ::vts::protocol::chassis::VehicleError_descriptor();
}
template <> struct is_proto_enum< ::vts::protocol::chassis::SteeringControlMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vts::protocol::chassis::SteeringControlMode>() {
  return ::vts::protocol::chassis::SteeringControlMode_descriptor();
}
template <> struct is_proto_enum< ::vts::protocol::chassis::GearControlMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vts::protocol::chassis::GearControlMode>() {
  return ::vts::protocol::chassis::GearControlMode_descriptor();
}
template <> struct is_proto_enum< ::vts::protocol::chassis::DrivingControlMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vts::protocol::chassis::DrivingControlMode>() {
  return ::vts::protocol::chassis::DrivingControlMode_descriptor();
}
template <> struct is_proto_enum< ::vts::protocol::chassis::BrakeControlMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vts::protocol::chassis::BrakeControlMode>() {
  return ::vts::protocol::chassis::BrakeControlMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chassis_5fenums_2eproto
